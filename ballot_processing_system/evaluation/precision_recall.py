import json
import os
import glob

def calculate_overall_metrics(result_dir, labels, dataset_name):
    """
    T√≠nh Precision v√† Recall cho m·ªôt dataset
    
    Args:
        result_dir: Th∆∞ m·ª•c ch·ª©a file k·∫øt qu·∫£ (_result.json)
        labels: Dict ch·ª©a nh√£n g·ªëc
        dataset_name: T√™n dataset (ƒë·ªÉ debug)
    """
    TP, FP, FN, TN = 0, 0, 0, 0
    processed_files = 0

    # L·∫•y t·∫•t c·∫£ file *_result.json trong th∆∞ m·ª•c
    pattern = os.path.join(result_dir, "*_result.json")
    result_files = glob.glob(pattern)
    
    print(f"\nüîç X·ª≠ l√Ω {dataset_name}:")
    print(f"   - Th∆∞ m·ª•c: {result_dir}")
    print(f"   - T√¨m th·∫•y {len(result_files)} file k·∫øt qu·∫£")

    for file_path in result_files:
        ballot_name = os.path.basename(file_path).replace("_result.json", "")
        
        # Ki·ªÉm tra c√≥ nh√£n kh√¥ng
        if ballot_name not in labels:
            print(f"   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y nh√£n cho {ballot_name}")
            continue
            
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                result = json.load(f)
        except Exception as e:
            print(f"   ‚ùå L·ªói ƒë·ªçc file {file_path}: {e}")
            continue

        ground_truth = labels[ballot_name]
        processed_files += 1

        for res in result:
            stt = res["stt"]
            
            # Ki·ªÉm tra index h·ª£p l·ªá
            if stt - 1 >= len(ground_truth):
                continue
                
            gt = ground_truth[stt - 1]  # v√¨ index b·∫Øt ƒë·∫ßu t·ª´ 0

            # Prediction (c·∫£ ƒë·ªìng √Ω v√† kh√¥ng ƒë·ªìng √Ω)
            pred_yes = res["dong_y"]
            pred_no = res["khong_dong_y"]

            # Ground truth (c·∫£ ƒë·ªìng √Ω v√† kh√¥ng ƒë·ªìng √Ω)
            true_yes = gt["dong_y"] == 1
            true_no = gt["khong_dong_y"] == 1

            # T√≠nh to√°n cho c·∫£ ƒë·ªìng √Ω v√† kh√¥ng ƒë·ªìng √Ω
            # ƒê·ªìng √Ω
            if pred_yes and true_yes:
                TP += 1
            elif pred_yes and not true_yes:
                FP += 1
            elif not pred_yes and true_yes:
                FN += 1
            elif not pred_yes and not true_yes:
                TN += 1
                
            # Kh√¥ng ƒë·ªìng √Ω
            if pred_no and true_no:
                TP += 1
            elif pred_no and not true_no:
                FP += 1
            elif not pred_no and true_no:
                FN += 1
            elif not pred_no and not true_no:
                TN += 1

    precision = TP / (TP + FP) if (TP + FP) > 0 else 0
    recall = TP / (TP + FN) if (TP + FN) > 0 else 0
    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0
    accuracy = (TP + TN) / (TP + TN + FP + FN) if (TP + TN + FP + FN) > 0 else 0
    
    print(f"   ‚úÖ ƒê√£ x·ª≠ l√Ω {processed_files} file")
    print(f"   üìä TP={TP}, FP={FP}, FN={FN}, TN={TN}")
    print(f"   üìà Precision={precision:.4f}, Recall={recall:.4f}, F1={f1:.4f}, Accuracy={accuracy:.4f}")
    
    return precision, recall, f1, accuracy, TP, FP, FN, TN

def main():
    """
    T√≠nh 4 gi√° tr·ªã trung b√¨nh: X_Precision, X_Recall, X_F1, X_Accuracy
    """
    print("üöÄ T√çNH TO√ÅN 4 GI√Å TR·ªä X_PRECISION, X_RECALL, X_F1, X_ACCURACY")
    
    # C·∫•u h√¨nh datasets
    datasets = [
        {
            'name': 'Data1',
            'label_file': 'lable_ballot/lable_ballot_data1.json',
            'result_dir': 'results/ket_qua_trocr_yolo/ket_qua_data1'
            # 'result_dir': "results/ket_qua_only_trocr/ket_qua_data1"
        },
        {
            'name': 'Data2', 
            'label_file': 'lable_ballot/lable_ballot_data2.json',
            'result_dir': 'results/ket_qua_trocr_yolo/ket_qua_data2'
            # 'result_dir': "results/ket_qua_only_trocr/ket_qua_data2"
        }
    ]
    
    total_tp, total_fp, total_fn, total_tn = 0, 0, 0, 0
    
    for dataset in datasets:
        name = dataset['name']
        label_file = dataset['label_file']
        result_dir = dataset['result_dir']
        
        # Ki·ªÉm tra file nh√£n
        if not os.path.exists(label_file):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file nh√£n: {label_file}")
            continue
            
        # Ki·ªÉm tra th∆∞ m·ª•c k·∫øt qu·∫£
        if not os.path.exists(result_dir):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c k·∫øt qu·∫£: {result_dir}")
            continue
        
        # ƒê·ªçc file nh√£n
        try:
            with open(label_file, "r", encoding="utf-8") as f:
                labels = json.load(f)
            print(f"üìñ ƒê·ªçc th√†nh c√¥ng file nh√£n {label_file}")
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc file nh√£n {label_file}: {e}")
            continue
        
        # T√≠nh metrics cho dataset n√†y
        precision, recall, f1, accuracy, tp, fp, fn, tn = calculate_overall_metrics(result_dir, labels, name)
        
        # C·ªông d·ªìn cho t·ªïng
        total_tp += tp
        total_fp += fp
        total_fn += fn
        total_tn += tn
    
    # T√≠nh 4 gi√° tr·ªã trung b√¨nh t·ªïng h·ª£p
    if total_tp + total_fp + total_fn + total_tn > 0:
        x_precision = total_tp / (total_tp + total_fp) if (total_tp + total_fp) > 0 else 0
        x_recall = total_tp / (total_tp + total_fn) if (total_tp + total_fn) > 0 else 0
        x_f1 = 2 * x_precision * x_recall / (x_precision + x_recall) if (x_precision + x_recall) > 0 else 0
        x_accuracy = (total_tp + total_tn) / (total_tp + total_tn + total_fp + total_fn)
        
        print(f"\n{'='*50}")
        print(f"üìä K·∫æT QU·∫¢ 4 GI√Å TR·ªä TRUNG B√åNH:")
        print(f"{'='*50}")
        print(f"X_Precision: {x_precision:.4f}")
        print(f"X_Recall:    {x_recall:.4f}")
        print(f"X_F1:        {x_f1:.4f}")
        print(f"X_Accuracy:  {x_accuracy:.4f}")
        print(f"{'='*50}")
    
    else:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n")

if __name__ == "__main__":
    main()
